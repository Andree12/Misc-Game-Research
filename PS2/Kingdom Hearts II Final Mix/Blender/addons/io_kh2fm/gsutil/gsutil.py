# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _gsutil
else:
    import _gsutil

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gsutil.delete_SwigPyIterator

    def value(self):
        return _gsutil.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gsutil.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gsutil.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gsutil.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gsutil.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gsutil.SwigPyIterator_copy(self)

    def next(self):
        return _gsutil.SwigPyIterator_next(self)

    def __next__(self):
        return _gsutil.SwigPyIterator___next__(self)

    def previous(self):
        return _gsutil.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gsutil.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gsutil.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gsutil.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gsutil.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gsutil.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gsutil.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gsutil.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _gsutil:
_gsutil.SwigPyIterator_swigregister(SwigPyIterator)

class Uint8Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gsutil.Uint8Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gsutil.Uint8Vector___nonzero__(self)

    def __bool__(self):
        return _gsutil.Uint8Vector___bool__(self)

    def __len__(self):
        return _gsutil.Uint8Vector___len__(self)

    def __getslice__(self, i, j):
        return _gsutil.Uint8Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gsutil.Uint8Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gsutil.Uint8Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gsutil.Uint8Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gsutil.Uint8Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gsutil.Uint8Vector___setitem__(self, *args)

    def pop(self):
        return _gsutil.Uint8Vector_pop(self)

    def append(self, x):
        return _gsutil.Uint8Vector_append(self, x)

    def empty(self):
        return _gsutil.Uint8Vector_empty(self)

    def size(self):
        return _gsutil.Uint8Vector_size(self)

    def swap(self, v):
        return _gsutil.Uint8Vector_swap(self, v)

    def begin(self):
        return _gsutil.Uint8Vector_begin(self)

    def end(self):
        return _gsutil.Uint8Vector_end(self)

    def rbegin(self):
        return _gsutil.Uint8Vector_rbegin(self)

    def rend(self):
        return _gsutil.Uint8Vector_rend(self)

    def clear(self):
        return _gsutil.Uint8Vector_clear(self)

    def get_allocator(self):
        return _gsutil.Uint8Vector_get_allocator(self)

    def pop_back(self):
        return _gsutil.Uint8Vector_pop_back(self)

    def erase(self, *args):
        return _gsutil.Uint8Vector_erase(self, *args)

    def __init__(self, *args):
        _gsutil.Uint8Vector_swiginit(self, _gsutil.new_Uint8Vector(*args))

    def push_back(self, x):
        return _gsutil.Uint8Vector_push_back(self, x)

    def front(self):
        return _gsutil.Uint8Vector_front(self)

    def back(self):
        return _gsutil.Uint8Vector_back(self)

    def assign(self, n, x):
        return _gsutil.Uint8Vector_assign(self, n, x)

    def resize(self, *args):
        return _gsutil.Uint8Vector_resize(self, *args)

    def insert(self, *args):
        return _gsutil.Uint8Vector_insert(self, *args)

    def reserve(self, n):
        return _gsutil.Uint8Vector_reserve(self, n)

    def capacity(self):
        return _gsutil.Uint8Vector_capacity(self)
    __swig_destroy__ = _gsutil.delete_Uint8Vector

# Register Uint8Vector in _gsutil:
_gsutil.Uint8Vector_swigregister(Uint8Vector)

PRIM = _gsutil.PRIM
RGBAQ = _gsutil.RGBAQ
ST = _gsutil.ST
UV = _gsutil.UV
XYZF2 = _gsutil.XYZF2
XYZ2 = _gsutil.XYZ2
TEX0_1 = _gsutil.TEX0_1
TEX0_2 = _gsutil.TEX0_2
CLAMP_1 = _gsutil.CLAMP_1
CLAMP_2 = _gsutil.CLAMP_2
FOG = _gsutil.FOG
XYZF3 = _gsutil.XYZF3
XYZ3 = _gsutil.XYZ3
TEX1_1 = _gsutil.TEX1_1
TEX1_2 = _gsutil.TEX1_2
TEX2_1 = _gsutil.TEX2_1
TEX2_2 = _gsutil.TEX2_2
XYOFFSET_1 = _gsutil.XYOFFSET_1
XYOFFSET_2 = _gsutil.XYOFFSET_2
PRMODECONT = _gsutil.PRMODECONT
PRMODE = _gsutil.PRMODE
TEXCLUT = _gsutil.TEXCLUT
SCANMSK = _gsutil.SCANMSK
MIPTBP1_1 = _gsutil.MIPTBP1_1
MIPTBP1_2 = _gsutil.MIPTBP1_2
MIPTBP2_1 = _gsutil.MIPTBP2_1
MIPTBP2_2 = _gsutil.MIPTBP2_2
TEXA = _gsutil.TEXA
FOGCOL = _gsutil.FOGCOL
TEXFLUSH = _gsutil.TEXFLUSH
SCISSOR_1 = _gsutil.SCISSOR_1
SCISSOR_2 = _gsutil.SCISSOR_2
ALPHA_1 = _gsutil.ALPHA_1
ALPHA_2 = _gsutil.ALPHA_2
DIMX = _gsutil.DIMX
DTHE = _gsutil.DTHE
COLCLAMP = _gsutil.COLCLAMP
TEST_1 = _gsutil.TEST_1
TEST_2 = _gsutil.TEST_2
PABE = _gsutil.PABE
FBA_1 = _gsutil.FBA_1
FBA_2 = _gsutil.FBA_2
FRAME_1 = _gsutil.FRAME_1
FRAME_2 = _gsutil.FRAME_2
ZBUF_1 = _gsutil.ZBUF_1
ZBUF_2 = _gsutil.ZBUF_2
BITBLTBUF = _gsutil.BITBLTBUF
TRXPOS = _gsutil.TRXPOS
TRXREG = _gsutil.TRXREG
TRXDIR = _gsutil.TRXDIR
HWREG = _gsutil.HWREG
SIGNAL = _gsutil.SIGNAL
FINISH = _gsutil.FINISH
LABEL = _gsutil.LABEL
PSMCT32 = _gsutil.PSMCT32
PSMCT24 = _gsutil.PSMCT24
PSMCT16 = _gsutil.PSMCT16
PSMCT16S = _gsutil.PSMCT16S
PSMT8 = _gsutil.PSMT8
PSMT4 = _gsutil.PSMT4
PSMT8H = _gsutil.PSMT8H
PSMT4HL = _gsutil.PSMT4HL
PSMT4HH = _gsutil.PSMT4HH
PSMZ32 = _gsutil.PSMZ32
PSMZ24 = _gsutil.PSMZ24
PSMZ16 = _gsutil.PSMZ16
PSMZ16S = _gsutil.PSMZ16S
UPPER_LEFT_TO_LOWER_RIGHT = _gsutil.UPPER_LEFT_TO_LOWER_RIGHT
LOWER_LEFT_TO_UPPER_RIGHT = _gsutil.LOWER_LEFT_TO_UPPER_RIGHT
UPPER_RIGHT_TO_LOWER_LEFT = _gsutil.UPPER_RIGHT_TO_LOWER_LEFT
LOWER_RIGHT_TO_UPPER_LEFT = _gsutil.LOWER_RIGHT_TO_UPPER_LEFT
HOST_TO_LOCAL = _gsutil.HOST_TO_LOCAL
LOCAL_TO_HOST = _gsutil.LOCAL_TO_HOST
LOCAL_TO_LOCAL = _gsutil.LOCAL_TO_LOCAL
DEACTIVATED = _gsutil.DEACTIVATED
RGB = _gsutil.RGB
RGBA = _gsutil.RGBA
MODULATE = _gsutil.MODULATE
DECAL = _gsutil.DECAL
HIGHLIGHT = _gsutil.HIGHLIGHT
HIGHLIGHT2 = _gsutil.HIGHLIGHT2
CLUT_PSMCT32 = _gsutil.CLUT_PSMCT32
CLUT_PSMCT16 = _gsutil.CLUT_PSMCT16
CLUT_PSMCT16S = _gsutil.CLUT_PSMCT16S
CSM1 = _gsutil.CSM1
CSM2 = _gsutil.CSM2
REPEAT = _gsutil.REPEAT
CLAMP = _gsutil.CLAMP
REGION_CLAMP = _gsutil.REGION_CLAMP
REGION_REPEAT = _gsutil.REGION_REPEAT
NEAREST = _gsutil.NEAREST
LINEAR = _gsutil.LINEAR
NEAREST_MIPMAP_NEAREST = _gsutil.NEAREST_MIPMAP_NEAREST
NEAREST_MIPMAP_LINEAR = _gsutil.NEAREST_MIPMAP_LINEAR
LINEAR_MIPMAP_NEAREST = _gsutil.LINEAR_MIPMAP_NEAREST
LINEAR_MIPMAP_LINEAR = _gsutil.LINEAR_MIPMAP_LINEAR
class GSRegBITBLTBUF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sbp = property(_gsutil.GSRegBITBLTBUF_sbp_get, _gsutil.GSRegBITBLTBUF_sbp_set)
    sbw = property(_gsutil.GSRegBITBLTBUF_sbw_get, _gsutil.GSRegBITBLTBUF_sbw_set)
    spsm = property(_gsutil.GSRegBITBLTBUF_spsm_get, _gsutil.GSRegBITBLTBUF_spsm_set)
    dbp = property(_gsutil.GSRegBITBLTBUF_dbp_get, _gsutil.GSRegBITBLTBUF_dbp_set)
    dbw = property(_gsutil.GSRegBITBLTBUF_dbw_get, _gsutil.GSRegBITBLTBUF_dbw_set)
    dpsm = property(_gsutil.GSRegBITBLTBUF_dpsm_get, _gsutil.GSRegBITBLTBUF_dpsm_set)

    def __init__(self, *args):
        _gsutil.GSRegBITBLTBUF_swiginit(self, _gsutil.new_GSRegBITBLTBUF(*args))

    def Data(self):
        return _gsutil.GSRegBITBLTBUF_Data(self)

    def DebugString(self):
        return _gsutil.GSRegBITBLTBUF_DebugString(self)
    __swig_destroy__ = _gsutil.delete_GSRegBITBLTBUF

# Register GSRegBITBLTBUF in _gsutil:
_gsutil.GSRegBITBLTBUF_swigregister(GSRegBITBLTBUF)

class GSRegTRXPOS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ssax = property(_gsutil.GSRegTRXPOS_ssax_get, _gsutil.GSRegTRXPOS_ssax_set)
    ssay = property(_gsutil.GSRegTRXPOS_ssay_get, _gsutil.GSRegTRXPOS_ssay_set)
    dsax = property(_gsutil.GSRegTRXPOS_dsax_get, _gsutil.GSRegTRXPOS_dsax_set)
    dsay = property(_gsutil.GSRegTRXPOS_dsay_get, _gsutil.GSRegTRXPOS_dsay_set)
    dir = property(_gsutil.GSRegTRXPOS_dir_get, _gsutil.GSRegTRXPOS_dir_set)

    def __init__(self, *args):
        _gsutil.GSRegTRXPOS_swiginit(self, _gsutil.new_GSRegTRXPOS(*args))

    def Data(self):
        return _gsutil.GSRegTRXPOS_Data(self)

    def DebugString(self):
        return _gsutil.GSRegTRXPOS_DebugString(self)
    __swig_destroy__ = _gsutil.delete_GSRegTRXPOS

# Register GSRegTRXPOS in _gsutil:
_gsutil.GSRegTRXPOS_swigregister(GSRegTRXPOS)

class GSRegTRXREG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rrw = property(_gsutil.GSRegTRXREG_rrw_get, _gsutil.GSRegTRXREG_rrw_set)
    rrh = property(_gsutil.GSRegTRXREG_rrh_get, _gsutil.GSRegTRXREG_rrh_set)

    def __init__(self, *args):
        _gsutil.GSRegTRXREG_swiginit(self, _gsutil.new_GSRegTRXREG(*args))

    def Data(self):
        return _gsutil.GSRegTRXREG_Data(self)

    def DebugString(self):
        return _gsutil.GSRegTRXREG_DebugString(self)
    __swig_destroy__ = _gsutil.delete_GSRegTRXREG

# Register GSRegTRXREG in _gsutil:
_gsutil.GSRegTRXREG_swigregister(GSRegTRXREG)

class GSRegTRXDIR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    xdir = property(_gsutil.GSRegTRXDIR_xdir_get, _gsutil.GSRegTRXDIR_xdir_set)

    def __init__(self, *args):
        _gsutil.GSRegTRXDIR_swiginit(self, _gsutil.new_GSRegTRXDIR(*args))

    def Data(self):
        return _gsutil.GSRegTRXDIR_Data(self)

    def DebugString(self):
        return _gsutil.GSRegTRXDIR_DebugString(self)
    __swig_destroy__ = _gsutil.delete_GSRegTRXDIR

# Register GSRegTRXDIR in _gsutil:
_gsutil.GSRegTRXDIR_swigregister(GSRegTRXDIR)

class GSRegTEX0(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tbp0 = property(_gsutil.GSRegTEX0_tbp0_get, _gsutil.GSRegTEX0_tbp0_set)
    tbw = property(_gsutil.GSRegTEX0_tbw_get, _gsutil.GSRegTEX0_tbw_set)
    psm = property(_gsutil.GSRegTEX0_psm_get, _gsutil.GSRegTEX0_psm_set)
    tw = property(_gsutil.GSRegTEX0_tw_get, _gsutil.GSRegTEX0_tw_set)
    th = property(_gsutil.GSRegTEX0_th_get, _gsutil.GSRegTEX0_th_set)
    tcc = property(_gsutil.GSRegTEX0_tcc_get, _gsutil.GSRegTEX0_tcc_set)
    tfx = property(_gsutil.GSRegTEX0_tfx_get, _gsutil.GSRegTEX0_tfx_set)
    cbp = property(_gsutil.GSRegTEX0_cbp_get, _gsutil.GSRegTEX0_cbp_set)
    cpsm = property(_gsutil.GSRegTEX0_cpsm_get, _gsutil.GSRegTEX0_cpsm_set)
    csm = property(_gsutil.GSRegTEX0_csm_get, _gsutil.GSRegTEX0_csm_set)
    csa = property(_gsutil.GSRegTEX0_csa_get, _gsutil.GSRegTEX0_csa_set)
    cld = property(_gsutil.GSRegTEX0_cld_get, _gsutil.GSRegTEX0_cld_set)

    def __init__(self, *args):
        _gsutil.GSRegTEX0_swiginit(self, _gsutil.new_GSRegTEX0(*args))

    def Data(self):
        return _gsutil.GSRegTEX0_Data(self)

    def DebugString(self):
        return _gsutil.GSRegTEX0_DebugString(self)
    __swig_destroy__ = _gsutil.delete_GSRegTEX0

# Register GSRegTEX0 in _gsutil:
_gsutil.GSRegTEX0_swigregister(GSRegTEX0)

class GSRegCLAMP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wms = property(_gsutil.GSRegCLAMP_wms_get, _gsutil.GSRegCLAMP_wms_set)
    wmt = property(_gsutil.GSRegCLAMP_wmt_get, _gsutil.GSRegCLAMP_wmt_set)
    minu = property(_gsutil.GSRegCLAMP_minu_get, _gsutil.GSRegCLAMP_minu_set)
    maxu = property(_gsutil.GSRegCLAMP_maxu_get, _gsutil.GSRegCLAMP_maxu_set)
    minv = property(_gsutil.GSRegCLAMP_minv_get, _gsutil.GSRegCLAMP_minv_set)
    maxv = property(_gsutil.GSRegCLAMP_maxv_get, _gsutil.GSRegCLAMP_maxv_set)

    def __init__(self, *args):
        _gsutil.GSRegCLAMP_swiginit(self, _gsutil.new_GSRegCLAMP(*args))

    def Data(self):
        return _gsutil.GSRegCLAMP_Data(self)

    def DebugString(self):
        return _gsutil.GSRegCLAMP_DebugString(self)
    __swig_destroy__ = _gsutil.delete_GSRegCLAMP

# Register GSRegCLAMP in _gsutil:
_gsutil.GSRegCLAMP_swigregister(GSRegCLAMP)

class GSRegTEX1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lcm = property(_gsutil.GSRegTEX1_lcm_get, _gsutil.GSRegTEX1_lcm_set)
    mxl = property(_gsutil.GSRegTEX1_mxl_get, _gsutil.GSRegTEX1_mxl_set)
    mmag = property(_gsutil.GSRegTEX1_mmag_get, _gsutil.GSRegTEX1_mmag_set)
    mmin = property(_gsutil.GSRegTEX1_mmin_get, _gsutil.GSRegTEX1_mmin_set)
    mtba = property(_gsutil.GSRegTEX1_mtba_get, _gsutil.GSRegTEX1_mtba_set)
    l = property(_gsutil.GSRegTEX1_l_get, _gsutil.GSRegTEX1_l_set)
    k = property(_gsutil.GSRegTEX1_k_get, _gsutil.GSRegTEX1_k_set)

    def __init__(self, *args):
        _gsutil.GSRegTEX1_swiginit(self, _gsutil.new_GSRegTEX1(*args))

    def Data(self):
        return _gsutil.GSRegTEX1_Data(self)

    def DebugString(self):
        return _gsutil.GSRegTEX1_DebugString(self)
    __swig_destroy__ = _gsutil.delete_GSRegTEX1

# Register GSRegTEX1 in _gsutil:
_gsutil.GSRegTEX1_swigregister(GSRegTEX1)

class GSRegTEX2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    psm = property(_gsutil.GSRegTEX2_psm_get, _gsutil.GSRegTEX2_psm_set)
    cbp = property(_gsutil.GSRegTEX2_cbp_get, _gsutil.GSRegTEX2_cbp_set)
    cpsm = property(_gsutil.GSRegTEX2_cpsm_get, _gsutil.GSRegTEX2_cpsm_set)
    csm = property(_gsutil.GSRegTEX2_csm_get, _gsutil.GSRegTEX2_csm_set)
    csa = property(_gsutil.GSRegTEX2_csa_get, _gsutil.GSRegTEX2_csa_set)
    cld = property(_gsutil.GSRegTEX2_cld_get, _gsutil.GSRegTEX2_cld_set)

    def __init__(self, *args):
        _gsutil.GSRegTEX2_swiginit(self, _gsutil.new_GSRegTEX2(*args))

    def Data(self):
        return _gsutil.GSRegTEX2_Data(self)

    def DebugString(self):
        return _gsutil.GSRegTEX2_DebugString(self)
    __swig_destroy__ = _gsutil.delete_GSRegTEX2

# Register GSRegTEX2 in _gsutil:
_gsutil.GSRegTEX2_swigregister(GSRegTEX2)

class GSHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gsutil.GSHelper_swiginit(self, _gsutil.new_GSHelper())
    __swig_destroy__ = _gsutil.delete_GSHelper

    def UploadPSMCT32(self, dbp, dbw, dsax, dsay, rrw, rrh, inbuf):
        return _gsutil.GSHelper_UploadPSMCT32(self, dbp, dbw, dsax, dsay, rrw, rrh, inbuf)

    def UploadPSMT8(self, dbp, dbw, dsax, dsay, rrw, rrh, inbuf):
        return _gsutil.GSHelper_UploadPSMT8(self, dbp, dbw, dsax, dsay, rrw, rrh, inbuf)

    def UploadPSMT4(self, dbp, dbw, dsax, dsay, rrw, rrh, inbuf):
        return _gsutil.GSHelper_UploadPSMT4(self, dbp, dbw, dsax, dsay, rrw, rrh, inbuf)

    def DownloadPSMCT32(self, dbp, dbw, dsax, dsay, rrw, rrh):
        return _gsutil.GSHelper_DownloadPSMCT32(self, dbp, dbw, dsax, dsay, rrw, rrh)

    def DownloadPSMT8(self, dbp, dbw, dsax, dsay, rrw, rrh):
        return _gsutil.GSHelper_DownloadPSMT8(self, dbp, dbw, dsax, dsay, rrw, rrh)

    def DownloadPSMT4(self, dbp, dbw, dsax, dsay, rrw, rrh):
        return _gsutil.GSHelper_DownloadPSMT4(self, dbp, dbw, dsax, dsay, rrw, rrh)

    def DownloadImagePSMT8(self, dbp, dbw, dsax, dsay, rrw, rrh, cbp, cbw, alpha_reg):
        return _gsutil.GSHelper_DownloadImagePSMT8(self, dbp, dbw, dsax, dsay, rrw, rrh, cbp, cbw, alpha_reg)

    def DownloadImagePSMT4(self, dbp, dbw, dsax, dsay, rrw, rrh, cbp, cbw, csa, alpha_reg):
        return _gsutil.GSHelper_DownloadImagePSMT4(self, dbp, dbw, dsax, dsay, rrw, rrh, cbp, cbw, csa, alpha_reg)

    def Clear(self):
        return _gsutil.GSHelper_Clear(self)

# Register GSHelper in _gsutil:
_gsutil.GSHelper_swigregister(GSHelper)



